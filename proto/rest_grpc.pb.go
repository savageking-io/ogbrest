// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: rest.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RestInterService_AuthInterService_FullMethodName = "/rest.RestInterService/AuthInterService"
	RestInterService_RequestRestData_FullMethodName  = "/rest.RestInterService/RequestRestData"
	RestInterService_NewRestRequest_FullMethodName   = "/rest.RestInterService/NewRestRequest"
	RestInterService_Ping_FullMethodName             = "/rest.RestInterService/Ping"
)

// RestInterServiceClient is the client API for RestInterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestInterServiceClient interface {
	AuthInterService(ctx context.Context, in *AuthenticateServiceRequest, opts ...grpc.CallOption) (*AuthenticateServiceResponse, error)
	RequestRestData(ctx context.Context, in *RestDataRequest, opts ...grpc.CallOption) (*RestDataDefinition, error)
	NewRestRequest(ctx context.Context, in *RestApiRequest, opts ...grpc.CallOption) (*RestApiResponse, error)
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error)
}

type restInterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestInterServiceClient(cc grpc.ClientConnInterface) RestInterServiceClient {
	return &restInterServiceClient{cc}
}

func (c *restInterServiceClient) AuthInterService(ctx context.Context, in *AuthenticateServiceRequest, opts ...grpc.CallOption) (*AuthenticateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateServiceResponse)
	err := c.cc.Invoke(ctx, RestInterService_AuthInterService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restInterServiceClient) RequestRestData(ctx context.Context, in *RestDataRequest, opts ...grpc.CallOption) (*RestDataDefinition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestDataDefinition)
	err := c.cc.Invoke(ctx, RestInterService_RequestRestData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restInterServiceClient) NewRestRequest(ctx context.Context, in *RestApiRequest, opts ...grpc.CallOption) (*RestApiResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestApiResponse)
	err := c.cc.Invoke(ctx, RestInterService_NewRestRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restInterServiceClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*PingMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingMessage)
	err := c.cc.Invoke(ctx, RestInterService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestInterServiceServer is the server API for RestInterService service.
// All implementations must embed UnimplementedRestInterServiceServer
// for forward compatibility.
type RestInterServiceServer interface {
	AuthInterService(context.Context, *AuthenticateServiceRequest) (*AuthenticateServiceResponse, error)
	RequestRestData(context.Context, *RestDataRequest) (*RestDataDefinition, error)
	NewRestRequest(context.Context, *RestApiRequest) (*RestApiResponse, error)
	Ping(context.Context, *PingMessage) (*PingMessage, error)
	mustEmbedUnimplementedRestInterServiceServer()
}

// UnimplementedRestInterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRestInterServiceServer struct{}

func (UnimplementedRestInterServiceServer) AuthInterService(context.Context, *AuthenticateServiceRequest) (*AuthenticateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthInterService not implemented")
}
func (UnimplementedRestInterServiceServer) RequestRestData(context.Context, *RestDataRequest) (*RestDataDefinition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRestData not implemented")
}
func (UnimplementedRestInterServiceServer) NewRestRequest(context.Context, *RestApiRequest) (*RestApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRestRequest not implemented")
}
func (UnimplementedRestInterServiceServer) Ping(context.Context, *PingMessage) (*PingMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRestInterServiceServer) mustEmbedUnimplementedRestInterServiceServer() {}
func (UnimplementedRestInterServiceServer) testEmbeddedByValue()                          {}

// UnsafeRestInterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestInterServiceServer will
// result in compilation errors.
type UnsafeRestInterServiceServer interface {
	mustEmbedUnimplementedRestInterServiceServer()
}

func RegisterRestInterServiceServer(s grpc.ServiceRegistrar, srv RestInterServiceServer) {
	// If the following call pancis, it indicates UnimplementedRestInterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RestInterService_ServiceDesc, srv)
}

func _RestInterService_AuthInterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestInterServiceServer).AuthInterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestInterService_AuthInterService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestInterServiceServer).AuthInterService(ctx, req.(*AuthenticateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestInterService_RequestRestData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestInterServiceServer).RequestRestData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestInterService_RequestRestData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestInterServiceServer).RequestRestData(ctx, req.(*RestDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestInterService_NewRestRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestInterServiceServer).NewRestRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestInterService_NewRestRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestInterServiceServer).NewRestRequest(ctx, req.(*RestApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RestInterService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestInterServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RestInterService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestInterServiceServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RestInterService_ServiceDesc is the grpc.ServiceDesc for RestInterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestInterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rest.RestInterService",
	HandlerType: (*RestInterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthInterService",
			Handler:    _RestInterService_AuthInterService_Handler,
		},
		{
			MethodName: "RequestRestData",
			Handler:    _RestInterService_RequestRestData_Handler,
		},
		{
			MethodName: "NewRestRequest",
			Handler:    _RestInterService_NewRestRequest_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RestInterService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rest.proto",
}
